{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/Modules/AnimationObject.js","webpack:///./src/Modules/Element.js","webpack:///./src/Modules/Elements.js","webpack:///./src/Modules/Globals/HelperFunctions.js","webpack:///./src/Modules/Globals/MouseMovement.js","webpack:///./src/app.js","webpack:///./src/index.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/*\r\n      Class description:\r\n      Uses logic that incorporates the user input to\r\n      generate an object which holds all the\r\n      object related properties and values.\r\n    */\nexport class AnimationObject {\n  constructor(animationObject) {\n    this.create(animationObject);\n  }\n  /*\r\n    # create\r\n      Top level function which\r\n    controls and combines results of several other internal functions\r\n    */\n\n\n  create(animationObject) {\n    animationObject.forEach(userInput => {\n      const dragDirection = this.setDirection(userInput.transform);\n      this.createAnimationObject(userInput, dragDirection);\n    });\n  }\n  /* \r\n    # setDirection\r\n      Helper function to determine the allowed directions that the object will use to transform\r\n  */\n\n\n  setDirection(transformType) {\n    switch (transformType) {\n      case 'rotateY':\n      case 'translateX':\n      case 'rotateZ':\n        return 'horizontal';\n        break;\n\n      case 'rotateX':\n      case 'translateY':\n      case 'translateZ':\n        return 'vertical';\n        break;\n      // case 'rotateZ':\n      // case 'translateZ':\n      //   return 'both';\n      //   break;\n\n      default:\n        return false;\n    }\n  }\n  /*\r\n    # createAnimationObject\r\n      Use default values combined with\r\n    user input to generate the object which is \r\n    better specified in the class description.\r\n  */\n\n\n  createAnimationObject(userInput, dragDirection) {\n    const defaultAnimationValues = {\n      dragSpeed: 1,\n      initalValue: 0,\n      easeSpeed: 1,\n      easeDuration: 200,\n      maxDragSpeed: 60\n    };\n    this[userInput.transform] = {};\n    this[userInput.transform].active = true;\n    this[userInput.transform].dragSpeedInput = userInput.dragSpeed || defaultAnimationValues.dragSpeed;\n    this[userInput.transform].dragSpeed = userInput.dragSpeed || defaultAnimationValues.dragSpeed;\n    this[userInput.transform].easeValue = userInput.initialValue || 0;\n    this[userInput.transform].dragValue = userInput.initialValue || 0;\n    this[userInput.transform].easeSpeed = userInput.easeSpeed || defaultAnimationValues.easeSpeed;\n    this[userInput.transform].easeDuration = userInput.easeDuration || defaultAnimationValues.easeDuration;\n    this[userInput.transform].dragDirection = dragDirection || 'both';\n    this[userInput.transform].maxDragSpeed = userInput.dragSpeed * 110 || defaultAnimationValues.dragSpeed * 110;\n  }\n\n}","/*\r\n  # Class description:\r\n  Select and store the DOM elements based on querySelector\r\n  Store and manipulate an instance of AnimationObject inside of element.transforms\r\n\r\n  Uses static HelperFunctions to:\r\n  - Update the DOM with the latest transform values\r\n  - Calculate easing for the ease out animation\r\n*/\nimport { HelperFunctions } from './Globals/HelperFunctions';\nimport { AnimationObject } from './AnimationObject';\nexport class Element {\n  constructor(selector, animationValues = false, mouseMovement) {\n    this.elements = document.querySelectorAll(selector);\n    this.mouseMovement = mouseMovement;\n    this.easeRotation;\n    this.transforms = new AnimationObject(animationValues);\n    HelperFunctions.transform(this.elements, this.transforms);\n  }\n  /*\r\n    #drag\r\n      Function is executed with interval timing\r\n      Activated: on mousedown\r\n    Deactivated: on mouseup\r\n      1.  Uses the MouseMovement class to\r\n        retrieve realtime movementX and movementY values\r\n    2.  Calculates transform values by multiplying the\r\n        movementX and/or movementY values with a user inputted speed multiplier\r\n    3.  Uses the HelperFunctions class to update the DOM elements with the \r\n        newly calculated values.\r\n  */\n\n\n  drag(direction = true) {\n    // Loop through all transformations inputted into this element\n    for (const key in this.transforms) {\n      // if statement only for demo purpose\n      if (this.transforms[key].active === false) {\n        continue;\n      }\n\n      let movement;\n\n      switch (this.transforms[key].dragDirection) {\n        case 'horizontal':\n          movement = Math.trunc(this.mouseMovement.movementX * this.transforms[key].dragSpeed);\n          break;\n\n        case 'vertical':\n          movement = Math.trunc(this.mouseMovement.movementY * this.transforms[key].dragSpeed);\n          break;\n\n        default:\n          movement = Math.trunc((this.mouseMovement.movementX + this.mouseMovement.movementY) * this.transforms[key].dragSpeed);\n      } // Update dragValue\n\n\n      this.transforms[key].dragValue += movement || 0;\n    } // Update the DOM elements based on the newly generated transform properties\n\n\n    HelperFunctions.transform(this.elements, this.transforms);\n  }\n  /*\r\n    #easeAnimation\r\n      Activates at mouse up, when the drag function ends\r\n    Sets an ease animation relative to drag speed and the latest stored mouse movement values\r\n  */\n\n\n  easeAnimation() {\n    // Loop through all transformations inputted into this element\n    for (const key in this.transforms) {\n      // if statement only for demo purpose\n      if (this.transforms[key].active === false) {\n        continue;\n      } // Copy the latest updated transformation value\n\n\n      this.transforms[key].easeValue = this.transforms[key].dragValue; // Create a new multiplier based on the drag speed (to keep the ease speed relative to the drag speed)\n\n      const multiplier = this.transforms[key].dragSpeed * 45;\n      let transformAmount; // Deduct which mouse direction(s) are set to the animation object\n      // Use that deduction to multiply the movementX and/or movementY values\n      // Stores the calculated amount to transform inside of the variable transformAmount\n\n      if (this.transforms[key].dragDirection === 'horizontal') {\n        transformAmount = this.mouseMovement.lastMovementX * multiplier;\n      } else if (this.transforms[key].dragDirection === 'vertical') {\n        transformAmount = this.mouseMovement.lastMovementY * multiplier;\n      } else if (this.transforms[key].dragDirection === 'both') {\n        transformAmount = (this.mouseMovement.lastMovementX + this.mouseMovement.lastMovementY) * multiplier * 1.5;\n      }\n\n      let i = 0;\n      /*\r\n        Execute an interval function which executes until duration == iteration count:\r\n        \r\n        - Calculates the new total transformation value per iteration\r\n        - Updates the DOM elements with the new total transformation value\r\n      */\n\n      this.transforms[key].easeIntervalID = setInterval(() => {\n        i++;\n\n        if (i > this.transforms[key].easeDuration / 1.67) {\n          // divided by 1.67 to match 60fps\n          clearInterval(this.transforms[key].easeIntervalID);\n          return;\n        }\n\n        this.transforms[key].dragValue = HelperFunctions.easeOutCalculation(i, this.transforms[key].easeValue, transformAmount, this.transforms[key].easeDuration);\n        HelperFunctions.transform(this.elements, this.transforms);\n      }, 16.7);\n    }\n  }\n\n}","import { MouseMovement } from './Globals/MouseMovement';\nimport { Element } from './Element';\nexport class Elements {\n  constructor() {\n    this.elements = [];\n    this.mouseMovement = new MouseMovement();\n    this.listen();\n    window.addEventListener('resize', this.onResize.bind(this));\n  }\n  /*\r\n    # create\r\n      1. Create a new element class using user input + a reference to the mousemovement class\r\n    2. Store it inside of this.elements array\r\n    3. Return the element's reference so it can be stored inside of a variable when calling this function\r\n  */\n\n\n  create(selector, aniObject) {\n    const newElement = new Element(selector, aniObject, this.mouseMovement);\n    this.elements.push(newElement);\n    this.setDragSpeeds();\n    return newElement;\n  }\n  /*\r\n    # startTouchDrag\r\n      - Store initial touch position\r\n    - Store initial movement\r\n  */\n\n\n  startTouchDrag() {\n    if (this.mouseMovement.touchEnabled) {\n      this.mouseMovement.touchX = event.touches[0].clientX;\n      this.mouseMovement.touchY = event.touches[0].clientY;\n      this.mouseMovement.initialTouchY = event.touches[0].clientY;\n      this.mouseMovement.initialTouchX = event.touches[0].clientX;\n      this.mouseMovement.prevMovementX = 0;\n      this.mouseMovement.prevMovementY = 0;\n    }\n\n    this.startDrag();\n  }\n  /*\r\n      # startDrag\r\n        Triggered on mouse down.\r\n      - Clear leftover animation interval's and values before starting up the drag interval\r\n    */\n\n\n  startDrag() {\n    this.mouseMovement.movementX = 0;\n    this.mouseMovement.movementY = 0;\n    this.elements.forEach(val => {\n      for (const key in val.transforms) {\n        clearInterval(val.transforms[key].easeIntervalID);\n      }\n    }); // Use 20ms for smooth & performant animation\n\n    this.dragIntervalID = setInterval(this.dragInterval.bind(this), 16.7);\n  }\n  /*\r\n      # stopDrag\r\n        Triggered on mouse up.\r\n      - Remove the drag interval\r\n      - Start up ease out animations for each Element Class\r\n    */\n\n\n  stopDrag() {\n    if (!this.dragIntervalID) {\n      return;\n    }\n\n    clearInterval(this.dragIntervalID);\n    this.elements.forEach(val => {\n      val.easeAnimation();\n    });\n  }\n  /*\r\n      # dragInterval\r\n        - Executes at an interval when either mousedown or touchstart is triggered.\r\n      - Stops when mouseup or touchend is triggered.\r\n        Calls drag functions (updates transform values based on mouse movement) inside of each Element Class\r\n        Mouse movement:\r\n      - The MouseMovement class is passed as a reference to each Element class\r\n      - Movement values are cleared after each drag function has finished updating the\r\n        class and DOM values, and will be re-accumulated for the next execution.\r\n    */\n\n\n  dragInterval() {\n    if (this.mouseMovement.touchEnabled === true) {\n      this.calculateTouchMovement();\n    } // Max speed\n\n\n    this.mouseMovement.movementX = this.mouseMovement.movementX > 50 ? 50 : this.mouseMovement.movementX;\n    this.mouseMovement.movementX = this.mouseMovement.movementX < -50 ? -50 : this.mouseMovement.movementX;\n    this.mouseMovement.movementY = this.mouseMovement.movementY > 50 ? 50 : this.mouseMovement.movementY;\n    this.mouseMovement.movementY = this.mouseMovement.movementY < -50 ? -50 : this.mouseMovement.movementY; // Execute drag function for each element\n\n    this.elements.forEach(val => {\n      val.drag();\n    }); // Set seperate variable lastMovement to prevent a movement value of 0 in the ease out animation\n\n    this.mouseMovement.lastMovementX = this.mouseMovement.movementX;\n    this.mouseMovement.lastMovementY = this.mouseMovement.movementY;\n    this.mouseMovement.movementX = 0;\n    this.mouseMovement.movementY = 0;\n  }\n  /*\r\n    # calculateTouchMovement\r\n      Calculate touch movement since last interval execution\r\n  */\n\n\n  calculateTouchMovement() {\n    this.mouseMovement.currentMovementX = this.mouseMovement.touchX - this.mouseMovement.initialTouchX;\n    this.mouseMovement.movementX = this.mouseMovement.currentMovementX - this.mouseMovement.prevMovementX;\n    this.mouseMovement.prevMovementX = this.mouseMovement.currentMovementX;\n    this.mouseMovement.currentMovementY = this.mouseMovement.touchY - this.mouseMovement.initialTouchY;\n    this.mouseMovement.movementY = this.mouseMovement.currentMovementY - this.mouseMovement.prevMovementY;\n    this.mouseMovement.prevMovementY = this.mouseMovement.currentMovementY;\n  }\n  /*\r\n    # setDragSpeeds\r\n      Called whenever an element is added or the viewport size is changed\r\n    -------------\r\n    Updates the drag speed of each element based on\r\n    it's initial input value and the viewport\r\n  */\n\n\n  setDragSpeeds() {\n    this.vw = window.innerWidth;\n    this.vh = window.innerHeight; // Set dragspeed of each element based on the viewport dimensions\n\n    this.elements.forEach(val => {\n      for (const key in val.transforms) {\n        val.transforms[key].dragSpeed = val.transforms[key].dragSpeedInput / (this.vw / 500 + 2.5);\n      }\n    });\n  }\n  /*\r\n    # onResize\r\n      - Detect and store changes to the viewport dimensions\r\n    - Update drag speed values for each element\r\n  */\n\n\n  onResize() {\n    this.vw = window.innerWidth;\n    this.vh = window.innerHeight; // Set dragspeed of each element based on the viewport dimensions\n\n    this.elements.forEach(val => {\n      for (const key in val.transforms) {\n        // Define drag speed based on touch or mouse device\n        val.transforms[key].dragSpeed = val.transforms[key].dragSpeedInput / (this.vw / 500 + 2.5);\n      }\n    });\n  }\n  /*\r\n    #listen\r\n      Initializes:\r\n    - Dragging functionality on mousedown\r\n    - Ease out functionality on mouseup\r\n  */\n\n\n  listen() {\n    window.addEventListener('mousedown', this.startDrag.bind(this));\n    window.addEventListener('mouseup', this.stopDrag.bind(this));\n    window.addEventListener('touchstart', this.startTouchDrag.bind(this));\n    window.addEventListener('touchend', this.stopDrag.bind(this));\n  }\n\n}","export class HelperFunctions {\n  constructor() {}\n  /* \r\n    # easeOutCalculation\r\n      Ease out calculation\r\n    Returns the new total value\r\n      i         =  current frame\r\n    initial   =  initial property value\r\n    add       =  addition or substraction to the initial value\r\n    duration  =  duration of the animation in keyframes\r\n  */\n\n\n  static easeOutCalculation(i, initial, add, duration) {\n    const t = i / (duration / 1.67); // divided by 1.67 to match 60fps\n\n    return initial + t * -add * (t - 2);\n  }\n  /*\r\n    # transform\r\n      Create a string with all transform values\r\n    Add them to the DOM element\r\n  */\n\n\n  static transform(elements, transforms) {\n    const rotateY = transforms.rotateY ? `rotateY(${transforms.rotateY.dragValue}deg) ` : '';\n    const rotateX = transforms.rotateX ? `rotateX(${transforms.rotateX.dragValue}deg) ` : '';\n    const rotateZ = transforms.rotateZ ? `rotateZ(${transforms.rotateZ.dragValue}deg) ` : '';\n    const translateY = transforms.translateY ? `translateY(${transforms.translateY.dragValue}px) ` : '';\n    const translateX = transforms.translateX ? `translateX(${transforms.translateX.dragValue}px) ` : '';\n    const translateZ = transforms.translateZ ? `translateZ(${transforms.translateZ.dragValue}px) ` : '';\n    const transformString = rotateY + rotateX + rotateZ + translateY + translateX + translateZ;\n    elements.forEach(el => {\n      el.style.transform = transformString;\n    });\n  }\n\n}","/*\r\n  Class description:\r\n    Detect and store mouse and touch movement\r\n    Detect and store changes to the viewport dimensions\r\n\r\n    The movement values are stored on an event basis\r\n    To use these values in a performant style, setInterval is used, movement values are\r\n    accumulated between each interval and are used and then reset in each interval.\r\n*/\nexport class MouseMovement {\n  constructor() {\n    this.mouseEnabled = false;\n    this.touchEnabled = false;\n    this.movementX = 0;\n    this.movementY = 0;\n    this.touchMovementX = 0;\n    this.touchMovementY = 0;\n    this.initialiseEventListeners();\n    setInterval(this.initialiseEventListeners.bind(this), 250);\n  }\n\n  initialiseEventListeners() {\n    if (matchMedia('(pointer:fine)').matches && this.mouseEnabled === false) {\n      this.mouseEnabled = true;\n      this.touchEnabled = false;\n      this.updateEventListeners();\n    } else if (matchMedia('(pointer:coarse)').matches && this.touchEnabled === false) {\n      this.touchEnabled = true;\n      this.mouseEnabled = false;\n      this.updateEventListeners();\n    }\n  }\n\n  updateEventListeners() {\n    if (this.mouseEnabled === true) {\n      /* Initialise if mouse is active */\n      window.removeEventListener('touchmove', this.touchMove.bind(this));\n      window.addEventListener('mousemove', this.mouseMove.bind(this));\n    } else if (this.touchEnabled === true) {\n      /* Initialise if touch is active */\n      window.removeEventListener('mousemove', this.mouseMove.bind(this));\n      window.addEventListener('touchmove', this.touchMove.bind(this));\n    }\n\n    this.movementX = 0;\n    this.movementY = 0;\n  }\n\n  mouseMove(event) {\n    // Track and Store realtime values for Mouse movement\n    this.movementX += event.movementX;\n    this.movementY += event.movementY;\n  }\n\n  touchMove(event) {\n    /* Initialize if touch is active */\n    this.touchX = event.touches[0].clientX;\n    this.touchY = event.touches[0].clientY;\n  }\n\n}","import { Elements } from './Modules/Elements';\nexport const app = new Elements();","import { app } from './app';\napp.create('.first', [{\n  transform: 'rotateX'\n}, {\n  transform: 'rotateY'\n}]);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChLA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}